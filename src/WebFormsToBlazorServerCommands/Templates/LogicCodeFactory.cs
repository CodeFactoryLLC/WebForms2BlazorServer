// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WebFormsToBlazorServerCommands.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeFactory;
    using CodeFactory.DotNet;
    using CodeFactory.DotNet.CSharp;
    using CodeFactory.VisualStudio;
    using WebFormsToBlazorServerCommands.Templates;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class LogicCodeFactory : LogicCodeFactoryBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 14 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"

    //Accessing the model data passed in by GenerateSource method.
    CodeFactory.DotNet.CSharp.CsModelStore csModelStore = CsModels;
    if(csModelStore == null) return null;
    if(csModelStore.Model == null) return null;
    if(csModelStore.Model.ModelType != CsModelType.Class) return null;
     
    ICsClass classData = csModelStore.Model as CsClass;
    if(classData == null) return null;
    if(!classData.IsLoaded) return null;
    var fullClassname= $"{classData.Namespace}.{classData.Name}";

    var repositories= csModelStore.Models("repositories");
    var repoMods = repositories.Cast<ICsSource>();

    Dictionary<string, string> namespaces = ModelData as Dictionary<string, string>;
    

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Syste" +
                    "m.Threading.Tasks;\r\nusing Microsoft.Extensions.Logging;\r\nusing Microsoft.AspNetC" +
                    "ore.Components;\r\n\r\n\r\nnamespace ");
            
            #line 40 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaces["Namespace"]));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    \r\n    public class ");
            
            #line 43 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classData.Name));
            
            #line default
            #line hidden
            this.Write("Base : ComponentBase\r\n    {\r\n        #region Properties\r\n");
            
            #line 46 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
  foreach (var classDataProperty in classData.Properties)  
            
            #line default
            #line hidden
            
            #line 47 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    { 
            
            #line default
            #line hidden
            
            #line 48 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    if(classDataProperty.HasDocumentation)
            
            #line default
            #line hidden
            
            #line 49 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    {
            
            #line default
            #line hidden
            
            #line 50 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        var documentLines = classDataProperty.Documentation.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
            
            #line default
            #line hidden
            
            #line 51 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        foreach(string docData in documentLines)
            
            #line default
            #line hidden
            
            #line 52 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        {
            
            #line default
            #line hidden
            
            #line 53 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            string formattedDocLine = FormatDocumentationLine(docData);
            
            #line default
            #line hidden
            
            #line 54 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            if(formattedDocLine == null) continue;
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 55 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(formattedDocLine));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 56 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
      }
    }
      if(classDataProperty.HasAttributes)
    {
        foreach(ICsAttribute attributeData in classDataProperty.Attributes)
        {
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 62 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeData.FormatCSharpAttributeSignatureSyntax()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 63 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
      }
    }
    
    string formattedProperty = classDataProperty.FormatCSharpDeclarationSyntax(true, false, false);
    if(string.IsNullOrEmpty(formattedProperty)) return null;

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 69 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture($"{formattedProperty}{Environment.NewLine}"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 70 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    } 
            
            #line default
            #line hidden
            this.Write("        #endregion\r\n\r\n        #region Methods\r\n");
            
            #line 74 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
  foreach (var classDataMethod in classData.Methods) 
            
            #line default
            #line hidden
            
            #line 75 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
  { 
            
            #line default
            #line hidden
            
            #line 76 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    if(classDataMethod.HasDocumentation)
            
            #line default
            #line hidden
            
            #line 77 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    {
            
            #line default
            #line hidden
            
            #line 78 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        var documentLines = classDataMethod.Documentation.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
            
            #line default
            #line hidden
            
            #line 79 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        foreach(string docData in documentLines)
            
            #line default
            #line hidden
            
            #line 80 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        {
            
            #line default
            #line hidden
            
            #line 81 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            string formattedDocLine = FormatDocumentationLine(docData);
            
            #line default
            #line hidden
            
            #line 82 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            if(formattedDocLine == null) continue;
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 83 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(formattedDocLine));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 84 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
      }
            
            #line default
            #line hidden
            
            #line 85 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    }
            
            #line default
            #line hidden
            
            #line 86 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    if(classDataMethod.HasAttributes)
            
            #line default
            #line hidden
            
            #line 87 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    {
            
            #line default
            #line hidden
            
            #line 88 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        foreach(ICsAttribute attributeData in classDataMethod.Attributes)
            
            #line default
            #line hidden
            
            #line 89 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        {
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 90 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attributeData.FormatCSharpAttributeSignatureSyntax()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 91 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
        }
            
            #line default
            #line hidden
            
            #line 92 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    }
            
            #line default
            #line hidden
            
            #line 93 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
 
            
            #line default
            #line hidden
            
            #line 94 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    string formattedMethod = FormatMethodSignature(classDataMethod);
            
            #line default
            #line hidden
            
            #line 95 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
    if(string.IsNullOrEmpty(formattedMethod)) return null;
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 96 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classDataMethod.GetBodySyntaxAsync()));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n");
            
            #line 98 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 100 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"
 
private string FormatDocumentationLine(string documentation)
{
        if(string.IsNullOrEmpty(documentation)) return null;
        string trimmed = documentation.Trim();
        if(trimmed.Contains("<member")) return null;
        if(trimmed.Contains("</member")) return null;
        return $"///{trimmed}";
}

        
        #line default
        #line hidden
        
        #line 110 "C:\github\CodeFactory\src\CommandProjects\WebFormsToBlazorServer\WebFormsToBlazorServerCommands\Templates\LogicCodeFactory.tt"

private string FormatMethodSignature(CsMethod methodData)
{
        if(methodData == null) return null;

        bool isAsyncReturn = false;
        
        bool isVoid= methodData.IsVoid;
        if(!isVoid)
        {
            isAsyncReturn = methodData.IsAsync;
            if(!isAsyncReturn) isAsyncReturn = methodData.ReturnType.Name == "Task";
            if(!isAsyncReturn) isAsyncReturn = methodData.ReturnType.Name.StartsWith("Task<");
        }
        StringBuilder methodSignature = new StringBuilder($"{methodData.Security.FormatCSharpSyntax()} ");
        
        if(isVoid) methodSignature.Append($"{CodeFactory.DotNet.CSharp.FormattedSyntax.Keywords.Void} ");
        else
        {
            if(isAsyncReturn) methodSignature.Append($"{CodeFactory.DotNet.CSharp.FormattedSyntax.CommonContextualKeywords.Async} ");
            methodSignature.Append($"{methodData.ReturnType.FormatCSharpFullTypeName()} ");
        }
        methodSignature.Append(methodData.Name);
        if(methodData.IsGeneric) methodSignature.Append(methodData.GenericParameters.FormatCSharpGenericSignatureSyntax());
        if(methodData.HasParameters) methodSignature.Append(methodData.Parameters.FormatCSharpParametersSignatureSyntax());
        else methodSignature.Append("()");
        
        return methodSignature.ToString();
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class LogicCodeFactoryBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
